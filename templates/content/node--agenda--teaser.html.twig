{#
/**
 * @file
 * Default theme implementation to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 *
 * @ingroup themeable
 */
#}

{#
 /**
  * Om de raw value date uit het field_agenda_date te trekken een extra
  * module installenren twig_field_value
 */
 #}
{% set agendaDate = content.field_agenda_date|field_raw.value %}

{% set classes = [
'col-md-3',
'agenda-item'
] %}
{#
/**
* zet variabele text gelijk aan content body zonder de tags
/*
#}
{% set text = content.body|render|striptags %}

<article{{ attributes.addClass(classes) }}>

  <div{{ content_attributes.addClass('agenda-teaser-wrap') }}>

    {% if "now"|date('U') > agendaDate|date('U') %}
    <div class="agenda-item-past">
      <div class="agenda-overlay"></div>
      {% else %}
      <div class="agenda-item-active">
        {% endif %}

        <div class="agenda-teaser-title">
          {{ label }}
        </div>
        <div class="agenda-teaser-date">
          {{ content.field_agenda_date }}
        </div>
        <div class="agenda-teaser-body">
          {#
          /**
          * controleer var text op lengte als de text langer is dan
          * 100 karakters deze afkappen (slice) op 100 karakters en
          * ... toevoegen, anders : text dus volledige text afprinten
          * volgende is een korte schrijfwijze van if statment
          * {{ condition ? if : else }}
          */
          #}
          {{ text|length > 100 ? text|slice(0, 100) ~ '...' : text }}
        </div>


        {#
        /**
        * class agenda_readmore en hide gelijkstellen aan een variable
        * afhankelijk van de conditie text|lenght deze class printen
        * dit om de btn readmore te tonen/verbergen
        * ook readmore tonen als er een file is toegevoegd
        */
        #}
        {% set readmore = "agenda_readmore" %}
        {% set hide = "readmore_hide" %}

        {% if content.field_agenda_file|render|trim is not empty %}
        <div class="{{ readmore }}">
          {% else %}
          <div class="{{ text|length > 100 ? readmore : hide }}">
            {% endif %}
            <a class="btn btn-default" href="{{ url }}"> {{ "Meer info" }}</a>
          </div>
        </div>
      </div>
      {#end agenda-item-past and agenda-item-active#}

</article>
